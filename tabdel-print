#!/usr/bin/perl

# $Id: tabdel-print,v 1.3 2012-10-17 14:34:33 quixote Exp $
# tabdel-print
# Copyright 2003-2012 Don Eisele
#Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

use Getopt::Std;

$defpadding = 2;

getopts("p:hj:d:s:") || usage();
if(defined($opt_h)) {
  usage();
}
sub usage {
  print "converts tab-delimited files to column output for printing\n";
  print "usage: $0 [-p padding] [-d delimiter] [-s 0|1] [filein]\n";
  print "-p: how much padding is in between columns [$defpadding]\n";
  print "-d: regexp to delimit the input by [\\t]\n";
  print "-s: trim leading/trailing whitespace [1]\n";
  print "-j: justification line [<<<<<<<<<<<<<<<<<]\n";
  exit -1;
}

$padding = defined($opt_p) ? $opt_p : 2;
$delim = defined($opt_d) ? $opt_d : '\t';
$split = qr/$delim/;
$trim = defined($opt_s) ? $opt_s : 1;

@widths = ();

while(<>) {
  chomp;
  $line = $_;
  my @seg = split($split,$line);
  for(my $i=0;$i<= $#seg;$i++) {
    if($trim) {
      $seg[$i] =~ s/^\s+//;
      $seg[$i] =~ s/\s+$//;
    }
    if(length($seg[$i]) > $widths[$i]) {
      $widths[$i] = length($seg[$i]);
    }
  }
  push @lines, \@seg;
}

if(defined($opt_j)) {
  $just = $opt_j;
} else {
  $just = "";
}
for(my $i=0; $i <= $#widths; $i++) {
  $just .= "<";
}

$format = "format STDOUT = \n";
$format2 = "";
for(my $i=0; $i <= $#widths; $i++) {
  $format .= '@';
  for(my $j=1;$j < $widths[$i]; $j++) {
    $format .= substr($just,$i,1);
  }
  for(my $j=0;$j < $padding; $j++) {
    $format .= " ";
  }
  $format2 .= "\$ref->\[$i\], ";
}
$format .= "\n$format2\n.\n";
#print $format;
eval $format;
die $@ if $@;

for $ref ( @lines ) {
  write;
}
